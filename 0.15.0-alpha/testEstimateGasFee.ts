import {
  AxelarQueryAPI,
  AxelarQueryAPIFeeResponse,
  Environment,
} from "@axelar-network/axelarjs-sdk";
import { BigNumber, ethers } from "ethers";

function getGasLimit(destChain: string) {
  return destChain === "mantle" ? 850_000_000 : 500_000;
}

function min(a: BigNumber, b: BigNumber) {
  return a.lt(b) ? a : b;
}

function max(a: BigNumber, b: BigNumber) {
  return a.gt(b) ? a : b;
}

function calculateDiffPercentage(actual: BigNumber, expected: BigNumber) {
  const diff = max(actual, expected).sub(min(actual, expected)).toNumber();
  const percent = (diff / actual.toNumber()) * 100;

  return percent;
}

const actualExecutionFeesByDestChain = {
  optimism: "3000000000000", // https://axelarscan.io/gmp/0xfd6ce98b4786d94efa10d6dd656cff410fa0333e13b7d4d0065fbfe5c7d94082:470
} as any;

async function estimate(env: Environment, srcChain: string, destChain: string) {
  const client = new AxelarQueryAPI({
    environment: env,
  });
  const gasLimit = getGasLimit(destChain);

  const fee = await client.estimateGasFee(
    srcChain,
    destChain,
    gasLimit,
    "auto",
    undefined,
    undefined,
    "0x1a98b2e0e68ba0eb84262d4bcf91955ec2680b37bcedd59a1f48e18d183dac9961bf9d1400000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000d40000000000000000000000000000000000000000000000000000000000deac2c6000000000000000000000000000000000000000000000000000000000000000762696e616e636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a307863653136463639333735353230616230313337376365374238386635424138433438463844363636000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bc000000000000000000000000000000000000000000000000000000000000000400000000000000000000000004607cad6135d7a119185ebe062d3b369b1b536ef000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000580000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000009200000000000000000000000000000000000000000000000000000000000000a8000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000eb466342c4d449bc9f53a865d5cb90586f4052150000000000000000000000000000000000000000000000000000000000000001000000000000000000000000eb466342c4d449bc9f53a865d5cb90586f405215000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000044095ea7b300000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000eb466342c4d449bc9f53a865d5cb90586f4052150000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000eb466342c4d449bc9f53a865d5cb90586f405215000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000000000000000000000000000000000000000000640000000000000000000000004fd39c9e151e50580779bd04b1f7ecc310079fd3000000000000000000000000000000000000000000000000000000000deac2c6000000000000000000000000000000000000000000000000000000000dc647500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000eb466342c4d449bc9f53a865d5cb90586f40521500000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000044095ea7b300000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab100000000000000000000000000000000000000000000000000000000000000640000000000000000000000004fd39c9e151e50580779bd04b1f7ecc310079fd3000000000000000000000000000000000000000000000000000000000de83dbf000000000000000000000000000000000000000000000000015d8c7908dbe7130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc80000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000100000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000242e1a7d4d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000004607cad6135d7a119185ebe062d3b369b1b536ef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000761786c5553444300000000000000000000000000000000000000000000000000",
    {
      showDetailedFees: true,
      destinationContractAddress: "",
      sourceContractAddress: "",
      tokenSymbol: "",
    }
  );

  const feeDetails = fee as AxelarQueryAPIFeeResponse;

  return {
    baseFee: feeDetails.baseFee,
    executionFee: feeDetails.executionFee,
    l1ExecutionFee: feeDetails.l1ExecutionFee,
  };
}

export default async function test() {
  const srcChain = "ethereum";
  const destChains = ["mantle", "optimism", "base", "scroll", "arbitrum"];

  const pendingFees = destChains.map((destChain) =>
    estimate(Environment.MAINNET, srcChain, destChain)
  );

  const fees = await Promise.all(pendingFees);

  for (let i = 0; i < fees.length; i++) {
    console.log(
      "\n================================================================="
    );
    console.log(
      `baseFee for ${srcChain} to ${destChains[i]}: ${ethers.utils.formatEther(
        fees[i].baseFee
      )} ETH`
    );
    console.log(
      `executionFee for ${srcChain} to ${
        destChains[i]
      }: ${ethers.utils.formatEther(fees[i].executionFee)} ETH`
    );
    console.log(
      `l1ExecutionFee for ${srcChain} to ${
        destChains[i]
      }: ${ethers.utils.formatEther(fees[i].l1ExecutionFee)} ETH`
    );

    const totalExecutionFee = ethers.BigNumber.from(fees[i].executionFee).add(
      fees[i].l1ExecutionFee
    );
    console.log(
      `totalExecutionFee for ${srcChain} to ${
        destChains[i]
      }: ${ethers.utils.formatEther(totalExecutionFee)} ETH`
    );
    if (actualExecutionFeesByDestChain[destChains[i]]) {
      const actualExecutionFee = ethers.BigNumber.from(
        actualExecutionFeesByDestChain[destChains[i]]
      );

      console.log(
        `actualExecutionFee for ${srcChain} to ${
          destChains[i]
        }: ${ethers.utils.formatEther(actualExecutionFee)} ETH`
      );

      console.log(
        `Diff SDK Execution Fee vs Actual Execution Fee for ${
          destChains[i]
        }: ${calculateDiffPercentage(actualExecutionFee, totalExecutionFee)} %`
      );
    }
  }
}
